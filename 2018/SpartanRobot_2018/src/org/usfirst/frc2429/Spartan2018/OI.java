// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2429.Spartan2018;

import org.usfirst.frc2429.Spartan2018.autonomous.DriveRobotPID;
import org.usfirst.frc2429.Spartan2018.buttons.*;
import org.usfirst.frc2429.Spartan2018.commands.*;
import org.usfirst.frc2429.Spartan2018.subIntake.*;
import org.usfirst.frc2429.Spartan2018.subLifter.*;
import org.usfirst.frc2429.Spartan2018.autonomous.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.buttons.*;



/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

	//------------------------------------------------------------------------------------

    public JoystickButton driveButtonY;
    public JoystickButton driveButtonX;
    public JoystickButton driveButtonA;
    public JoystickButton driveButtonB;
    public JoystickButton driveButtonLB;
    public JoystickButton driveButtonRB;
    public JoystickButton driveButtonStart;
    public JoystickButton driveButtonBack;
    public Joystick driveStick;

    public AxisButton driveButtonRT;
    public AxisButton driveButtonLT;
    public PovButtonUp driveButtonPovUp;
    public PovButtonDown driveButtonPovDown;
	public PovButtonRight driveButtonPovRight;
	public PovButtonLeft driveButtonPovLeft;
	public PovButtonUpRight driveButtonPovUpRight;
	public PovButtonUpLeft driveButtonPovUpLeft;
	public PovButtonDownRight driveButtonPovDownRight;
	public PovButtonDownLeft driveButtonPovDownLeft;
    
    public JoystickButton cubeButtonB;
    public JoystickButton cubeButtonA;
    public JoystickButton cubeButtonX;
    public JoystickButton cubeButtonY;
    public JoystickButton cubeButtonLB;
    public JoystickButton cubeButtonRB;
    public AxisButton cubeButtonRT;
    public AxisButton cubeButtonLT;
    public PovButtonUp cubeButtonPovUp;
    public PovButtonDown cubeButtonPovDown;
	public PovButtonRight cubeButtonPovRight;
	public PovButtonLeft cubeButtonPovLeft;
	public PovButtonUpRight cubeButtonPovUpRight;
	public PovButtonUpLeft cubeButtonPovUpLeft;
	public PovButtonDownRight cubeButtonPovDownRight;
	public PovButtonDownLeft cubeButtonPovDownLeft;
    public JoystickButton cubeButtonStart;
    public JoystickButton cubeButtonBack;
    public Joystick cubeStick;
	
	public static double joyStickOffsetX = 0;
	public static double joyStickOffsetY = 0;
	public static double joyStickOffsetTwist = 0;
	// The twist is 5 (CJH's home controller)
	final public static int XAXIS = 0;
	final public static int YAXIS = 1;
	final public static int TWISTAXIS = 4;
	final public static int LIFTAXIS = 5;
	final public static int INTAKE_XAXIS = 0;
	final public static int INTAKE_YAXIS = 1;
	
	final public static double DPAD_THRUST=0.4;
	final public static double DPAD_TWIST=0.75;
	
	//------------------------------------------------------------------------------------
	//Change the configuration based on one or two joysticks
	// Competition mode true => 2 gamepads
	public static boolean bCompetitionMode = true;
    
	//------------------------------------------------------------------------------------


    public OI() {
    	if(bCompetitionMode) {
	    		cubeStick = new Joystick(1);
		        cubeButtonY = new JoystickButton(cubeStick, 4);
		        //cubeButtonY.whenPressed(new IntakeToggle());
		        cubeButtonX = new JoystickButton(cubeStick, 3);
		        cubeButtonX.whileHeld(new LifterSetPower());
		        cubeButtonA = new JoystickButton(cubeStick, 1);
		        //cubeButtonA.whenPressed(new EjectCube(0.75));
		        cubeButtonB = new JoystickButton(cubeStick, 2);
		        cubeButtonB.whileHeld(new IntakeWithStick(cubeStick));
		        cubeButtonRT = new AxisButton(cubeStick, 2);
		        //cubeButtonRT.whileHeld(new IntakeReceiveOnTrigger());
				cubeButtonLT = new AxisButton(cubeStick, 3);
		        //cubeButtonLT.whileHeld(new IntakeEjectOnTrigger());
		        cubeButtonRB = new JoystickButton(cubeStick, 6);
		        //cubeButtonRB.whileHeld(new LifterUp());
		        cubeButtonLB = new JoystickButton(cubeStick, 5);
		        //cubeButtonLB.whileHeld(new LifterDown());
		        ///Dpad movement
		        cubeButtonPovUp = new PovButtonUp(cubeStick);
		        //cubeButtonPovUp.whenPressed(new LifterIncrementPosition(1));
		    	cubeButtonPovDown = new PovButtonDown(cubeStick);
		    	cubeButtonPovDown.whileHeld(new LifterOverridePosition());
		        cubeButtonStart = new JoystickButton(cubeStick, 8);
		        cubeButtonStart.whenPressed(new LifterTop());
		        cubeButtonBack = new JoystickButton(cubeStick, 7);
		        cubeButtonBack.whenPressed(new LifterSwitch());
		       	/*
		    	cubeButtonPovLeft = new PovButtonLeft(cubeStick);
		    	cubeButtonPovLeft.whileHeld(new MoveDPad(0,-DPAD_TWIST));
		    	cubeButtonPovRight = new PovButtonRight(cubeStick);
		    	cubeButtonPovRight.whileHeld(new MoveDPad(0,DPAD_TWIST));
		       	cubeButtonPovUpLeft = new PovButtonUpLeft(cubeStick);
		    	cubeButtonPovUpLeft.whileHeld(new MoveDPad(DPAD_THRUST,-DPAD_TWIST));
		    	cubeButtonPovUpRight = new PovButtonUpRight(cubeStick);
		    	cubeButtonPovUpRight.whileHeld(new MoveDPad(DPAD_THRUST,DPAD_TWIST));
		       	cubeButtonPovDownLeft = new PovButtonDownLeft(cubeStick);
		    	cubeButtonPovDownLeft.whileHeld(new MoveDPad(-DPAD_THRUST,-DPAD_TWIST));
		    	cubeButtonPovDownRight = new PovButtonDownRight(cubeStick);
		    	cubeButtonPovDownRight.whileHeld(new MoveDPad(-DPAD_THRUST,DPAD_TWIST));
		    	*/
    	}
    
    	
    	//check to see if we have a second joystick plugged in - the errors are such a pain if you try to open one and it's not there  

       //DriverStation ds = DriverStation.getInstance();
       //System.out.println("kJoystickPorts: " + String.format("%.2f",(double)ds.kJoystickPorts));
        
       
        driveStick = new Joystick(0);
        
        driveButtonRB = new JoystickButton(driveStick, 6);
        driveButtonRB.whileHeld(new LifterUp());
        driveButtonLB = new JoystickButton(driveStick, 5);
        driveButtonLB.whileHeld(new LifterDown());
        driveButtonB = new JoystickButton(driveStick, 2);
       // driveButtonB.whenPressed(new PickupCube());
        driveButtonB.whenPressed(new LifterWallCube());
        driveButtonA = new JoystickButton(driveStick, 1);
        driveButtonA.whenPressed(new EjectCube(0.75));
        driveButtonX = new JoystickButton(driveStick, 3);
        driveButtonX.whenPressed(new LifterReset());
        driveButtonY = new JoystickButton(driveStick, 4);
        driveButtonY.whenPressed(new IntakeToggle());
        driveButtonStart = new JoystickButton(driveStick, 8);
        driveButtonStart.whenPressed(new ClimberToggle());
        driveButtonBack = new JoystickButton(driveStick, 7);
        driveButtonBack.whenPressed(new ClimberReverseToggle());
        
        driveButtonRT = new AxisButton(driveStick, 2);
        driveButtonRT.whileHeld(new IntakeReceiveOnTrigger());
		driveButtonLT = new AxisButton(driveStick, 3);
        driveButtonLT.whileHeld(new IntakeEjectOnTrigger());
       
        
    	//------------------------------------------------------------------------------------
        ///Dpad movement
        driveButtonPovUp = new PovButtonUp(driveStick);
        //driveButtonPovUp.whileHeld(new MoveForwardDPad());
        driveButtonPovUp.whileHeld(new MoveDPad(DPAD_THRUST,0));
    	driveButtonPovDown = new PovButtonDown(driveStick);
    	//driveButtonPovDown.whileHeld(new MoveBackDPad());
    	driveButtonPovDown.whileHeld(new MoveDPad(-DPAD_THRUST,0));
       	driveButtonPovLeft = new PovButtonLeft(driveStick);
    	driveButtonPovLeft.whileHeld(new MoveDPad(0,-DPAD_TWIST));
    	driveButtonPovRight = new PovButtonRight(driveStick);
    	driveButtonPovRight.whileHeld(new MoveDPad(0,DPAD_TWIST));
       	driveButtonPovUpLeft = new PovButtonUpLeft(driveStick);
    	driveButtonPovUpLeft.whileHeld(new MoveDPad(DPAD_THRUST,-DPAD_TWIST));
    	driveButtonPovUpRight = new PovButtonUpRight(driveStick);
    	driveButtonPovUpRight.whileHeld(new MoveDPad(DPAD_THRUST,DPAD_TWIST));
       	driveButtonPovDownLeft = new PovButtonDownLeft(driveStick);
    	driveButtonPovDownLeft.whileHeld(new MoveDPad(-DPAD_THRUST,-DPAD_TWIST));
    	driveButtonPovDownRight = new PovButtonDownRight(driveStick);
    	driveButtonPovDownRight.whileHeld(new MoveDPad(-DPAD_THRUST,DPAD_TWIST));
        
    	
    	//------------------------------------------------------------------------------------
        //SmartDashboard Buttons
        //SmartDashboard.putData("CalibrateJoystick", new CalibrateJoystick());
        SmartDashboard.putData("Autonomous Forward", new DriveRobotPID(21, 0.18,3.0));
        SmartDashboard.putData("Autonomous Backward", new DriveRobotPID(-100, 0.18,3.0));
        SmartDashboard.putData("Autonomous Rotate", new TurnRobotPID(82));
        SmartDashboard.putData("Autonomous Neg Rotate", new TurnRobotPID(-82));
        SmartDashboard.putData("Pickup Cube", new PickupCube());
        SmartDashboard.putData("Lifter Bottom", new LifterBottom());
        SmartDashboard.putData("Lifter Top", new LifterTop());
        SmartDashboard.putData("Lifter Switch", new LifterSwitch());
        SmartDashboard.putNumber("AutoPosition", 1);
        SmartDashboard.putNumber("AutoAbort", 0);
        SmartDashboard.putNumber("Set Power", 0);
        //SmartDashboard.putNumber("AutoTestParameter", 100);

    }
	//------------------------------------------------------------------------------------

   
    public Joystick getdriveStick() {
        return driveStick;
    }

    public Joystick getcubeStick() {
        return cubeStick;
    }

    /**
	 * Calibrates the joystick and updates the offsets
	 * 
	 */

	public void calibrateJoystick() {
		
		System.out.println("CalibrateJoyStick called at: " + String.format("%.2f",Timer.getFPGATimestamp())+"s");
    	
		joyStickOffsetX=0.0;
    	joyStickOffsetY=0.0;
    	joyStickOffsetTwist=0.0;
      	
    	  for(int i = 0; i<100; i++)
          {
          	joyStickOffsetX+=(driveStick.getRawAxis(OI.XAXIS)*.01);
          	joyStickOffsetY+=(driveStick.getRawAxis(OI.YAXIS)*.01);
          	joyStickOffsetTwist+=(driveStick.getRawAxis(OI.TWISTAXIS)*.01);
          }
}

	/**
	 * Returns the calibrated input.
	 * 
	 * @return calibratedX Double representing the corrected input.
	 */
	public double calibratedJoyX() {
		double calibratedX = driveStick.getRawAxis(XAXIS) - joyStickOffsetX;
		//SmartDashboard.putNumber("X-Value: ", (double) Math.round(calibratedX * 1000d) / 1000d);
		return calibratedX;
	}

	public double calibratedJoyY() {
		double calibratedY = (driveStick.getRawAxis(YAXIS) - joyStickOffsetY);
		//SmartDashboard.putNumber("Y-Value: ", (double) Math.round(calibratedY * 1000d) / 1000d);
		return calibratedY;
	}

	public double calibratedJoyTwist() {
		double calibratedTwist = driveStick.getRawAxis(TWISTAXIS) - joyStickOffsetTwist;
		//SmartDashboard.putNumber("Twist: ", (double) Math.round(calibratedTwist * 1000d) / 1000d);
		return calibratedTwist;
	}
	
	
	public double getTwist() {
		return driveStick.getRawAxis(TWISTAXIS);
	}
	public double getThrust() {
		return driveStick.getRawAxis(YAXIS);
	}
	
	public void log() {
        //SmartDashboard.putNumber("Joystick Twist", driveStick.getRawAxis(TWISTAXIS));
        //SmartDashboard.putNumber("Joystick Thrust", driveStick.getRawAxis(YAXIS));
        //SmartDashboard.putNumber("Joystick Lift", driveStick.getRawAxis(LIFTAXIS));
	}
}

