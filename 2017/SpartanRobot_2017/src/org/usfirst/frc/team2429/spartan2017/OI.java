// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team2429.spartan2017;

import org.usfirst.frc.team2429.spartan2017.ballcommands.*;
import org.usfirst.frc.team2429.spartan2017.buttons.*;
import org.usfirst.frc.team2429.spartan2017.commands.*;
import org.usfirst.frc.team2429.spartan2017.deprecated.AutonomousToggleShooting;
import org.usfirst.frc.team2429.spartan2017.deprecated.BallAgitatorForward;
import org.usfirst.frc.team2429.spartan2017.deprecated.BallAgitatorReverse;
import org.usfirst.frc.team2429.spartan2017.movement.*;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	//// CREATING BUTTONS
	// One type of button is a joystick button which is any button on a
	//// joystick.
	// You create one by telling it which joystick it's on and which button
	// number it is.
	// Joystick stick = new Joystick(port);
	// Button button = new JoystickButton(stick, buttonNumber);

	// There are a few additional built in buttons you can use. Additionally,
	// by subclassing Button you can create custom triggers and bind those to
	// commands the same as any other Button.

	//// TRIGGERING COMMANDS WITH BUTTONS
	// Once you have a button, it's trivial to bind it to a button in one of
	// three ways:

	// Start the command when the button is pressed and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenPressed(new ExampleCommand());

	// Run the command while the button is being held down and interrupt it once
	// the button is released.
	// button.whileHeld(new ExampleCommand());

	// Start the command when the button is released and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenReleased(new ExampleCommand());

	// variables for autonomous
	private String autonomousLocation;
	private double autonomousStartingDistance;
	private double autonomousGearRotationAngle;
	private double AutonomousInitialShooterRotationAngle;
	private double autonomousSecondShooterRotationAngle;
	private double autonomousShooterTravelDistance;
	private double autonomousCumulativeRotation;
	private boolean bAutonomousShootingPosition;
	private boolean bAllowAutonomousShooting;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public JoystickButton buttonA;
	public JoystickButton buttonB;
	public JoystickButton buttonX;
	public JoystickButton buttonY;
	public JoystickButton buttonLB;
	public JoystickButton buttonRB;
	public JoystickButton buttonBack;
	public JoystickButton buttonStart;
	public AxisButton buttonLT;
	public AxisButton buttonRT;
	public PovButtonUp buttonPovUp;
	public PovButtonDown buttonPovDown;
	public PovButtonRight buttonPovRight;
	public PovButtonLeft buttonPovLeft;

	public static Joystick xbox1;
	public static double joyStickOffsetX = 0;
	public static double joyStickOffsetY = 0;
	public static double joyStickOffsetTwist = 0;
	// The twist is 4 on the xbox and 2 on the logitech (CJH's home controller)
	final public static int XAXIS = 0;
	final public static int YAXIS = 1;
	final public static int TWIST = 4;

	// Sensitivity offsets for the joystick
	public static double twistSensitivity = 0.5;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public OI() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

		// initialize the autonomous variables so no null pointer issues in the
		// command groups
		autonomousLocation = "NONE";
		autonomousStartingDistance = 0.0;
		autonomousGearRotationAngle = 0.0;
		AutonomousInitialShooterRotationAngle = 0.0;
		autonomousShooterTravelDistance = 0.0;
		autonomousSecondShooterRotationAngle = 0.0;
		bAutonomousShootingPosition = false;
		bAllowAutonomousShooting = false;
		
		// operator interface
		xbox1 = new Joystick(0);

		// Define all the regular buttons
		buttonA = new JoystickButton(xbox1, 1);
		buttonB = new JoystickButton(xbox1, 2);
		buttonX = new JoystickButton(xbox1, 3);
		buttonY = new JoystickButton(xbox1, 4);
		buttonLB = new JoystickButton(xbox1, 5);
		buttonRB = new JoystickButton(xbox1, 6);
		buttonBack = new JoystickButton(xbox1, 7);
		buttonStart = new JoystickButton(xbox1, 8);
		// Axis buttons are redefined to work on the trigger axis
		buttonLT = new AxisButton(xbox1, 2);
		buttonRT = new AxisButton(xbox1, 3);
		// Define all the POV buttons, defined on POV logic (see custom OI
		// package)
		buttonPovUp = new PovButtonUp(xbox1);
		buttonPovDown = new PovButtonDown(xbox1);
		buttonPovLeft = new PovButtonLeft(xbox1);
		buttonPovRight = new PovButtonRight(xbox1);

		// ** Assign functions to the buttons **
		// Canonical four buttons

		//buttonA.whenPressed(new BallCollectorReverse());
		//Changed for competition
		buttonA.whenPressed(new AutonomousGearDelivery());
		buttonB.whenPressed(new RobotTwistRight());
		buttonX.whenPressed(new RobotTwistLeft());
		buttonY.whenPressed(new CalibrateJoystick());
		//buttonY.whenPressed(new AutonomousShooting());

		//buttonStart.whenPressed(new BallAgitatorOscillateCmdGroup(Robot.ballAgitator.oscillateTime));
		
		//Climber mapped to button 3/1/2017
		buttonStart.whenPressed(new ClimberStart());
		buttonBack.whenPressed(new ClimberStop());

		// Define all the buttons for ball handling
		buttonRB.whenPressed(new BallCollectorOn());
		buttonRT.whenPressed(new BallCollectorOff());
		buttonLB.whenPressed(new BallShooterStart());
		buttonLT.whenPressed(new BallShooterStop());
		// Define buttons for slow motion robot movement
		buttonPovUp.whenPressed(new RobotMoveForward());
		buttonPovDown.whenPressed(new RobotMoveBackward());
		buttonPovLeft.whenPressed(new RobotStrafeLeft());
		buttonPovRight.whenPressed(new RobotStrafeRight());
		

		// buttonY.whenPressed(new CalibrateTalon());
		// buttonA.whenPressed(new CalibrateJoyStick());
		// buttonB.whenPressed(new RobotTwistRight(45.0));
		// buttonX.whenPressed(new RobotTwistLeft(45.0));
		// buttonLB.whenPressed(new ImageCaptureAndProcess());
		// buttonLT.whenPressed(new RobotMoveBackward(1.0));
		// buttonRB.whenPressed(new RobotStrafeRight(1.0));
		// buttonRT.whenPressed(new RobotMoveForward(1.0));

		// SmartDashboard function buttons
		//SmartDashboard.putData("Calibrate Talon", new CalibrateTalon());
		//SmartDashboard.putData("CalibrateJoyStick", new CalibrateJoystick());
		//SmartDashboard.putData("Autonomous Preparation", new AutonomousPreparation());
		// SmartDashboard.putData("Decrease Brightness", new
		// CameraBrightnessDown());
		// SmartDashboard.putData("Increase Brightness", new
		// CameraBrightnessUp());
		// SmartDashboard.putData("Decrease Exposure", new
		// CameraExposureDown());
		// SmartDashboard.putData("Increase Exposure", new CameraExposureUp());
		// SmartDashboard.putData("Image Process", new
		// ImageCaptureAndProcess());
		// SmartDashboard.putData("Test Imaging", new GetTwistToTarget());

		// Smartdashboard motion buttons
		//SmartDashboard.putData("Move Forward", new RobotMoveForward(30.0));
		//SmartDashboard.putData("Move Backward", new RobotMoveBackward(5.0));
		//SmartDashboard.putData("Strafe Left", new RobotStrafeLeft(5.0));
		//SmartDashboard.putData("Strafe Right", new RobotStrafeRight(5.0));
		// SmartDashboard.putData("Strafe Diagonal Upper Right", new
		// RobotStrafeDiagonal(5.0,1.0,-1.0));
		// SmartDashboard.putData("Strafe Diagonal Upper Left", new
		// RobotStrafeDiagonal(5.0,-1.0,-1.0));
		// SmartDashboard.putData("Strafe Diagonal Lower Right", new
		// RobotStrafeDiagonal(5.0,1.0,1.0));
		// SmartDashboard.putData("Strafe Diagonal Lower Left", new
		// RobotStrafeDiagonal(5.0,-1.0,1.0));

		//SmartDashboard.putData("TwistRight", new RobotTwistRight(45));
		//SmartDashboard.putData("TwistLeft", new RobotTwistLeft(45));

		// ball handling
		 //SmartDashboard.putData("BallAgitatorForward", new BallAgitatorForward());
		 //SmartDashboard.putData("BallAgitatorStop", new BallAgitatorStop());
		//SmartDashboard.putData("Low Torque", new TestWheelLow());
		//SmartDashboard.putData("Full Speed", new TestWheelHigh());
		 //SmartDashboard.putData("BallGateStart", new BallGateStart());

		 
		// SmartDashboard.putData("BallAgitatorReverse", new
		// BallAgitatorReverse());
		// SmartDashboard.putData("BallGateOpen", new BallGateOpen());
		// SmartDashboard.putData("BallGateClose", new BallGateClose());

		SmartDashboard.putData("JoyCal", new CalibrateJoystick());
		SmartDashboard.putData("DropGear", new RobotDriveToGearTarget());
		SmartDashboard.putData("AutoShoot", new AutonomousShooting());
		SmartDashboard.putData("ToggleAllowShooting", new AutonomousToggleShooting());
		
		//SmartDashboard.putData("RobotStrafeToGearTarget", new RobotStrafeToGearTarget());
		//SmartDashboard.putData("RobotRotateCustomPID", new RobotRotateCustomPID());
		//SmartDashboard.putData("RobotCenterToGearTarget", new RobotCenterToGearTarget());
		//SmartDashboard.putData("PID Twist+", new RobotRotateCustomPID(55, false));
		//SmartDashboard.putData("PID Twist-", new RobotRotateCustomPID(-10, false));
		//SmartDashboard.putData("MoveStPID 20", new RobotMoveStraightPID(20, false));
		//SmartDashboard.putData("AutoGear", new AutonomousGearDelivery());
		//SmartDashboard.putData("AutoSetImagingVar", new AutonomousSetImagingVariables());
		
		// Testing Functions 
		//SmartDashboard.putData("Climber Stop", new ClimberStop());
		//SmartDashboard.putData("Climber Start", new ClimberStart());
		//SmartDashboard.putData("Climber Cal", new ClimberCalibrate());
	
	}


	public Joystick getxbox1() {
		return xbox1;
	}

	/**
	 * Returns the calibrated input.
	 * 
	 * @return calibratedX Double representing the corrected input.
	 */
	public double customGetJoyX() {
		double calibratedX = xbox1.getRawAxis(XAXIS) - joyStickOffsetX;
		//SmartDashboard.putNumber("X-Value: ", (double) Math.round(calibratedX * 1000d) / 1000d);
		return calibratedX;
	}

	public double customGetJoyY() {
		double calibratedY = (xbox1.getRawAxis(YAXIS) - joyStickOffsetY);
		//SmartDashboard.putNumber("Y-Value: ", (double) Math.round(calibratedY * 1000d) / 1000d);
		return calibratedY;
	}

	public double customGetJoyTwist() {
		double calibratedTwist = xbox1.getRawAxis(TWIST) - joyStickOffsetTwist;
		//SmartDashboard.putNumber("Twist: ", (double) Math.round(calibratedTwist * 1000d) / 1000d);
		return calibratedTwist * twistSensitivity;
	}
	
	/**
	 * Calibrates the joystick and updates the offsets
	 * 
	 */

	public void calibrateJoystick() {
		
		System.out.println("CalibrateJoyStick called at: " + String.format("%.2f",Timer.getFPGATimestamp())+"s");
    	
		OI.joyStickOffsetX=0.0;
    	OI.joyStickOffsetY=0.0;
    	OI.joyStickOffsetTwist=0.0;
      	
    	  for(int i = 0; i<100; i++)
          {
          	OI.joyStickOffsetX+=(OI.xbox1.getRawAxis(OI.XAXIS)*.01);
          	OI.joyStickOffsetY+=(OI.xbox1.getRawAxis(OI.YAXIS)*.01);
          	OI.joyStickOffsetTwist+=(OI.xbox1.getRawAxis(OI.TWIST)*.01);
          }
    	  
    	//SmartDashboard.putNumber("Offset X: ", (double)Math.round(OI.joyStickOffsetX * 1000d) / 1000d);
    	//SmartDashboard.putNumber("Offset Y: ", (double)Math.round(OI.joyStickOffsetY * 1000d) / 1000d);
    	//SmartDashboard.putNumber("Offset Twist: ", (double)Math.round(OI.joyStickOffsetTwist * 1000d) / 1000d);
	}
	
	/**
	 * Getters and setters for autonomous parameters. This will likely grow
	 * 
	 */
	public void setAutonomousLocation(String location) {
		autonomousLocation = location;
	}

	public String getAutonomousLocation() {
		return autonomousLocation;
	}

	public void setAutonomousStartingDistance(double distance) {
		autonomousStartingDistance = distance;
	}

	public double getAutonomousStartingDistance() {
		return autonomousStartingDistance;
	}

	public void setAutonomousGearRotationAngle(double angle) {
		autonomousGearRotationAngle = angle;
	}
	public double getAutonomousGearRotationAngle() {
		return autonomousGearRotationAngle;
	}

	public void setAutonomousInitialShooterRotationAngle(double angle) {
		AutonomousInitialShooterRotationAngle = angle;
	}
	public double getAutonomousInitialShooterRotationAngle() {
		return AutonomousInitialShooterRotationAngle;
	}

	public double getAutonomousSecondShooterRotationAngle() {
		return autonomousSecondShooterRotationAngle;
	}
	public void setAutonomousSecondShooterRotationAngle(double angle) {
		autonomousSecondShooterRotationAngle = angle;
	}


	
	public void setAutonomousShooterTravelDistance(double distance) {
		autonomousShooterTravelDistance = distance;
	}
	public double getAutonomousShooterTravelDistance() {
		return autonomousShooterTravelDistance;
	}
	
	public void autonomousCumulativeRotation(double distance) {
		autonomousCumulativeRotation = distance;
	}

	public double autonomousCumulativeRotation() {
		return autonomousCumulativeRotation;
	}
	
	public void setAutonomousShootingPosition(boolean flag) {
		bAutonomousShootingPosition = flag;
	}
	
	public boolean isAutonomousShootingPosition() {
		return bAutonomousShootingPosition;
	}
	
	public boolean isShootingAllowed() {
		return bAllowAutonomousShooting;
	}
	
	public void setShootingAllowed(boolean flag) {
		bAllowAutonomousShooting = flag;
	}
}
